syntax = "proto3";

package mms;
option go_package = "./mms";

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

message BaseResp {
  string msg = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

message CallbackReq {
  string state = 1;
  string code = 2;
}

//  base message
message Empty {}

message IDReq {
  uint64 id = 1;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message MemberInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string username = 5;
  optional string password = 6;
  optional string nickname = 7;
  optional uint64 rank_id = 8;
  optional string mobile = 9;
  optional string email = 10;
  optional string avatar = 11;
  optional string wechat_id = 12;
  optional string rank_code = 13;
  optional int64 expired_at = 14;
}

message MemberListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string username = 3;
  optional string nickname = 4;
  optional string mobile = 5;
  optional string email = 6;
  optional uint64 rank_id = 7;
  optional string wechat_id = 8;
}

message MemberListResp {
  uint64 total = 1;
  repeated MemberInfo data = 2;
}

message MemberLoginResp {
  string id = 1;
  string nickname = 2;
  string avatar = 3;
  uint64 rank_id = 4;
}

message MemberRankInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional string description = 5;
  optional string remark = 6;
  optional string code = 7;
}

message MemberRankListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string description = 4;
  optional string remark = 5;
}

message MemberRankListResp {
  uint64 total = 1;
  repeated MemberRankInfo data = 2;
}

message MemberRegisterReq {
  string username = 1;
  string email = 2;
  string password = 3;
}

message OauthLoginReq {
  string state = 1;
  string provider = 2;
}

message OauthProviderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional string client_id = 5;
  optional string client_secret = 6;
  optional string redirect_url = 7;
  optional string scopes = 8;
  optional string auth_url = 9;
  optional string token_url = 10;
  optional uint64 auth_style = 11;
  optional string info_url = 12;
}

message OauthProviderListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

message OauthProviderListResp {
  uint64 total = 1;
  repeated OauthProviderInfo data = 2;
}

message OauthRedirectResp {
  string url = 1;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

message TokenInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string uuid = 5;
  optional string token = 6;
  optional string source = 7;
  optional int64 expired_at = 8;
  optional string username = 9;
}

message TokenListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string username = 3;
  optional string nickname = 4;
  optional string email = 5;
  optional string uuid = 6;
}

message TokenListResp {
  uint64 total = 1;
  repeated TokenInfo data = 2;
}

message UUIDReq {
  string id = 1;
}

message UUIDsReq {
  repeated string ids = 1;
}

message UsernameReq {
  string username = 1;
}

service Mms {
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  Member management
  //  group: member
  rpc createMember(MemberInfo) returns (BaseUUIDResp);
  //  group: member
  rpc updateMember(MemberInfo) returns (BaseResp);
  //  group: member
  rpc getMemberList(MemberListReq) returns (MemberListResp);
  //  group: member
  rpc deleteMember(UUIDsReq) returns (BaseResp);
  //  group: member
  rpc getMemberById(UUIDReq) returns (MemberInfo);
  //  group: member
  rpc getMemberByUsername(UsernameReq) returns (MemberInfo);
  //  MemberRank management
  //  group: memberrank
  rpc createMemberRank(MemberRankInfo) returns (BaseIDResp);
  //  group: memberrank
  rpc updateMemberRank(MemberRankInfo) returns (BaseResp);
  //  group: memberrank
  rpc getMemberRankList(MemberRankListReq) returns (MemberRankListResp);
  //  group: memberrank
  rpc getMemberRankById(IDReq) returns (MemberRankInfo);
  //  group: memberrank
  rpc deleteMemberRank(IDsReq) returns (BaseResp);
  //  OauthProvider management
  //  group: oauthprovider
  rpc createOauthProvider(OauthProviderInfo) returns (BaseIDResp);
  //  group: oauthprovider
  rpc updateOauthProvider(OauthProviderInfo) returns (BaseResp);
  //  group: oauthprovider
  rpc getOauthProviderList(OauthProviderListReq) returns (OauthProviderListResp);
  //  group: oauthprovider
  rpc getOauthProviderById(IDReq) returns (OauthProviderInfo);
  //  group: oauthprovider
  rpc deleteOauthProvider(IDsReq) returns (BaseResp);
  //  group: oauthprovider
  rpc oauthLogin(OauthLoginReq) returns (OauthRedirectResp);
  //  group: oauthprovider
  rpc oauthCallback(CallbackReq) returns (MemberInfo);
  //  group: oauthprovider
  rpc wechatMiniProgramLogin(OauthLoginReq) returns (BaseResp);
  //  Token management
  //  group: token
  rpc createToken(TokenInfo) returns (BaseUUIDResp);
  //  group: token
  rpc deleteToken(UUIDsReq) returns (BaseResp);
  //  group: token
  rpc getTokenList(TokenListReq) returns (TokenListResp);
  //  group: token
  rpc getTokenById(UUIDReq) returns (TokenInfo);
  //  group: token
  rpc blockUserAllToken(UUIDReq) returns (BaseResp);
  //  group: token
  rpc updateToken(TokenInfo) returns (BaseResp);
}

